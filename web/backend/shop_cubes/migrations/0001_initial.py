# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-05-18 11:07
from __future__ import unicode_literals

import core.db.base.fields.displayable_url_field
import core.db.image.image
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CubesAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('name', models.CharField(max_length=512, verbose_name='Название')),
                ('order', models.IntegerField(default=0, verbose_name='порядок')),
                ('key', models.CharField(max_length=512, unique=True, validators=[django.core.validators.RegexValidator(code='nomatch', message='Недопустимые символы для ключа атрибута', regex='^[-_a-z\\d]+$')], verbose_name='ключ')),
                ('attribute_type', models.PositiveSmallIntegerField(choices=[(1, 'Choice'), (2, 'MultipleChoice'), (3, 'Integer'), (4, 'Bool'), (5, 'Color')], db_index=True, verbose_name='тип атрибута')),
                ('is_default_filter', models.BooleanField(db_index=True, default=True, verbose_name='фильтр по умолчанию')),
            ],
            options={
                'verbose_name_plural': 'атрибуты',
                'abstract': False,
                'verbose_name': 'атрибут',
            },
        ),
        migrations.CreateModel(
            name='CubesAttributeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('name', models.CharField(max_length=512, verbose_name='Название')),
                ('attribute_type', models.PositiveSmallIntegerField(choices=[(1, 'Choice'), (2, 'MultipleChoice'), (3, 'Integer'), (4, 'Bool'), (5, 'Color')], db_index=True, verbose_name='типа атрибута')),
                ('_str_value', models.CharField(blank=True, db_index=True, default=None, max_length=512, null=True, validators=[django.core.validators.RegexValidator(message='slug valid error', regex='^[-_a-z\\d]+$')], verbose_name='Значение ')),
                ('_int_value', models.IntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='Значение')),
                ('_bool_value', models.NullBooleanField(db_index=True, default=None, verbose_name='Значение')),
                ('slug', models.CharField(db_index=True, max_length=256, unique=True, validators=[django.core.validators.RegexValidator(message='slug valid error', regex='^[-_a-z\\d]+$')], verbose_name='slug')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='shop_cubes.CubesAttribute')),
            ],
            options={
                'verbose_name_plural': 'Значения атрибутов',
                'abstract': False,
                'verbose_name': 'Значение атрибута',
            },
        ),
        migrations.CreateModel(
            name='CubesAttributeValueFilterRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_cubes.CubesAttribute')),
                ('attribute_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_cubes.CubesAttributeValue')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CubesCategoryNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('slug', models.CharField(max_length=1024, unique=True, validators=[django.core.validators.RegexValidator(message='slug valid error', regex='^[-_a-z\\d]+$')], verbose_name='Слаг')),
                ('url', core.db.base.fields.displayable_url_field.DisplayableURLField(editable=False, max_length=2048, unique=True, validators=[django.core.validators.RegexValidator(message='slug valid error', regex='^(($)|(([-_\\da-z]+/)+$))')], verbose_name='URL')),
                ('scoring', models.IntegerField(default=0, verbose_name='Скоринг')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликован')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified_at', models.DateTimeField(blank=True, verbose_name='Последнее изменение')),
                ('_title', models.CharField(blank=True, max_length=512, verbose_name='Заголовок')),
                ('_meta_title', models.CharField(blank=True, max_length=256, verbose_name='Мета заголовок')),
                ('_meta_keywords', models.CharField(blank=True, max_length=256, verbose_name='Мета ключевые слова')),
                ('_meta_description', models.CharField(blank=True, max_length=256, verbose_name='Мета описание')),
                ('name', models.CharField(max_length=512, verbose_name='Название')),
                ('search_scoring', models.PositiveIntegerField(default=10, verbose_name='поисковый скоринг')),
                ('_depth', models.PositiveIntegerField(default=0, verbose_name='глубина узла в графе')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CubesCategoryNodeAdditionalRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CubesCategoryNodeAttributeValueRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attributevalue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_cubes.CubesAttributeValue')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_cubes.CubesCategoryNode')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CubesCategoryNodeGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('name', models.CharField(max_length=512, verbose_name='Название')),
                ('order', models.IntegerField(default=0, verbose_name='порядок')),
            ],
            options={
                'verbose_name_plural': 'Группа атрибутов',
                'abstract': False,
                'verbose_name': 'Группа атрибута',
            },
        ),
        migrations.CreateModel(
            name='CubesCategoryNodeInputRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_attribute_value', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop_cubes.CubesAttributeValue')),
                ('group', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop_cubes.CubesCategoryNodeGroup')),
                ('input_node', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='input_node_reverse', to='shop_cubes.CubesCategoryNode')),
                ('output_node', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='output_node_reverse', to='shop_cubes.CubesCategoryNode')),
            ],
        ),
        migrations.CreateModel(
            name='CubesCategoryNodeOutdatedUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified_at', models.DateTimeField(blank=True, verbose_name='Последнее изменение')),
                ('url', core.db.base.fields.displayable_url_field.DisplayableURLField(editable=False, max_length=2048, unique=True, validators=[django.core.validators.RegexValidator(message='slug valid error', regex='^(($)|(([-_\\da-z]+/)+$))')], verbose_name='URL')),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_cubes.CubesCategoryNode')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CubesImagesRegisterRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(db_index=True, max_length=1024, verbose_name='url')),
            ],
        ),
        migrations.CreateModel(
            name='CubesProductAdditionalImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='порядок')),
                ('image', models.ImageField(blank=True, default='images/no_photo.png', upload_to=core.db.image.image.UploadTo, verbose_name='Картинка')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CubesProductCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('slug', models.CharField(max_length=1024, unique=True, validators=[django.core.validators.RegexValidator(message='slug valid error', regex='^[-_a-z\\d]+$')], verbose_name='Слаг')),
                ('url', core.db.base.fields.displayable_url_field.DisplayableURLField(editable=False, max_length=2048, unique=True, validators=[django.core.validators.RegexValidator(message='slug valid error', regex='^(($)|(([-_\\da-z]+/)+$))')], verbose_name='URL')),
                ('scoring', models.IntegerField(default=0, verbose_name='Скоринг')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликован')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified_at', models.DateTimeField(blank=True, verbose_name='Последнее изменение')),
                ('_title', models.CharField(blank=True, max_length=512, verbose_name='Заголовок')),
                ('_meta_title', models.CharField(blank=True, max_length=256, verbose_name='Мета заголовок')),
                ('_meta_keywords', models.CharField(blank=True, max_length=256, verbose_name='Мета ключевые слова')),
                ('_meta_description', models.CharField(blank=True, max_length=256, verbose_name='Мета описание')),
                ('name', models.CharField(max_length=512, verbose_name='Название')),
                ('weigh', models.PositiveIntegerField(default=0, verbose_name='Вес - кг')),
                ('height', models.PositiveIntegerField(default=0, verbose_name='высота (см)')),
                ('width', models.PositiveIntegerField(default=0, verbose_name='длина (см)')),
                ('length', models.PositiveIntegerField(default=0, verbose_name='ширина (см)')),
                ('search_scoring', models.PositiveIntegerField(default=10, verbose_name='поисковый скоринг')),
                ('price', models.PositiveIntegerField(verbose_name='Цена')),
                ('purchase_price', models.PositiveIntegerField(default=0, verbose_name='Цена закупки')),
                ('old_price', models.PositiveIntegerField(default=0, verbose_name='Старая цена')),
                ('vendor', models.CharField(max_length=255, verbose_name='Производитель')),
                ('is_in_stock', models.BooleanField(default=False, verbose_name='В наличии')),
                ('is_sale', models.BooleanField(default=False, editable=False, verbose_name='В распродаже')),
                ('is_new', models.BooleanField(default=False, verbose_name='Новинка')),
                ('is_bestseller', models.BooleanField(default=False, verbose_name='Бестселлер')),
                ('image', models.ImageField(blank=True, default='images/no_photo.png', upload_to=core.db.image.image.UploadTo, verbose_name='Картинка')),
                ('vendor_code', models.CharField(db_index=True, max_length=1024, unique=True, validators=[django.core.validators.RegexValidator(message='vendor_code valid error', regex='^[-_a-z\\d]+$')], verbose_name='Артикул')),
                ('product_type', models.CharField(blank=True, choices=[('', 'Не задано'), ('BACKPACK', 'BACKPACK'), ('BAG', 'BAG'), ('SUITCASE', 'SUITCASE'), ('PURSE', 'PURSE')], default='', max_length=128, verbose_name='Тип продукта')),
                ('model', models.CharField(db_index=True, max_length=1024, verbose_name='Модель')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CubesProductCardAttributeValueRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_cubes.CubesAttributeValue')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_cubes.CubesProductCard')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CubesProductModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, verbose_name='Название')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='cubesproductcard',
            name='attribute_values',
            field=models.ManyToManyField(blank=True, related_name='referring_nodes', through='shop_cubes.CubesProductCardAttributeValueRelation', to='shop_cubes.CubesAttributeValue'),
        ),
        migrations.AddField(
            model_name='cubesproductcard',
            name='product_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='shop_cubes.CubesProductModel'),
        ),
        migrations.AddField(
            model_name='cubesproductadditionalimage',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_cubes.CubesProductCard'),
        ),
        migrations.AddField(
            model_name='cubesimagesregisterrecord',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images_register_records', to='shop_cubes.CubesProductCard'),
        ),
        migrations.AddField(
            model_name='cubescategorynode',
            name='attribute_values',
            field=models.ManyToManyField(blank=True, related_name='categories', through='shop_cubes.CubesCategoryNodeAttributeValueRelation', to='shop_cubes.CubesAttributeValue'),
        ),
        migrations.AddField(
            model_name='cubescategorynode',
            name='inputs',
            field=models.ManyToManyField(blank=True, related_name='outputs', through='shop_cubes.CubesCategoryNodeInputRelation', to='shop_cubes.CubesCategoryNode'),
        ),
        migrations.AddField(
            model_name='cubescategorynode',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childs', to='shop_cubes.CubesCategoryNode'),
        ),
        migrations.AddField(
            model_name='cubescategorynode',
            name='related_nodes',
            field=models.ManyToManyField(blank=True, related_name='referring_nodes', through='shop_cubes.CubesCategoryNodeAdditionalRelation', to='shop_cubes.CubesCategoryNode'),
        ),
        migrations.AddField(
            model_name='cubesattributevalue',
            name='filters',
            field=models.ManyToManyField(blank=True, related_name='filter_values', through='shop_cubes.CubesAttributeValueFilterRelation', to='shop_cubes.CubesAttribute'),
        ),
        migrations.AddField(
            model_name='cubesattribute',
            name='category_node_group',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop_cubes.CubesCategoryNodeGroup'),
        ),
        migrations.AlterUniqueTogether(
            name='cubesproductcardattributevaluerelation',
            unique_together=set([('product', 'attribute_value')]),
        ),
        migrations.AlterUniqueTogether(
            name='cubesimagesregisterrecord',
            unique_together=set([('product', 'url')]),
        ),
        migrations.AlterUniqueTogether(
            name='cubescategorynodeinputrelation',
            unique_together=set([('input_node', 'output_node')]),
        ),
        migrations.AlterUniqueTogether(
            name='cubescategorynodeattributevaluerelation',
            unique_together=set([('category', 'attributevalue')]),
        ),
        migrations.AlterUniqueTogether(
            name='cubesattributevaluefilterrelation',
            unique_together=set([('attribute', 'attribute_value')]),
        ),
        migrations.AlterUniqueTogether(
            name='cubesattributevalue',
            unique_together=set([('attribute', '_str_value', '_int_value', '_bool_value')]),
        ),
    ]
